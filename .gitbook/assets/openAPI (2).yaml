openapi: 3.0.0
info:
  title: Bucket Public API
  description: This is Bucket's API which serves 
  version: 1.0.0

servers:
  - url: http://front.bucket.co/
    description: Globaly distributed API
  - url: http://front-eu.bucket.co/
    description: API to be accessed by customers using EU data residency

security:
  - bearerAuth: []

paths:
  /user:
    post:
      summary: User
      description: >
        Use this endpoint when you want to send user attributes to Bucket.
        If the user does not exist, it will be created.
        This endpoint is also used whenever you construct bucket client in any of the SDKs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /company:
    post:
      summary: Company
      description: >
        Use this endpoint when you want to send company attributes to Bucket.
        If the company does not exist, it will be created.
        You can also use this endpoint to assign user to a company by including the user ID.
        This endpoint is also used whenever you construct bucket client in any of the SDKs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /event:
    post:
      summary: Event
      description: >
        Use this endpoint when you want to send a tracking events to Bucket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /feedback:
    post:
      summary: Feedback
      description: >
        Use this endpoint when you want to send feedback events to Bucket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /bulk:
    post:
      summary: Bulk
      description: >
        Use this endpoint when you want to send multiple events to Bucket.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bulk"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    # Responses
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          enum: [true]
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
          enum: [false]
          default: false
        error:
          type: object
          properties:
            code:
              type: string
              enum:
                - "UNKNOWN_ERROR"
                - "INVALID_API_KEY"
                - "FEEDBACK_PROMPTING_DISABLED"
                - "BODY_VALIDATION_FAILED"
                - "QUERY_VALIDATION_FAILED"
                - "SEGMENT_AUTH_REQUIRED"
                - "SEGMENT_MESSAGE_TYPE_NOT_SUPPORTED"
                - "SEGMENT_MESSAGE_VALIDATION_FAILED"
                - "FEATURE_NOT_FOUND"
                - "WRONG_REGION"
              description: The error code
            message:
              type: string
              description: The error message
            validationErrors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                    description: The error message
          
      required:
        - error
        - success
      additionalProperties: false

    # Schemas from here on are generated from zod schemas
    User:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
          description: This is the user ID
        attributes:
          type: object
          default: null
        context:
          type: object
          properties:
            active:
              type: boolean
          additionalProperties: false
        timestamp:
          type: string
          format: date-time
      required:
        - userId
      additionalProperties: false

    Company:
      type: object
      properties:
        companyId:
          type: string
          minLength: 1
        userId:
          type: string
          minLength: 1
          default: null
        attributes:
          type: object
          default: null
        context:
          type: object
          properties:
            active:
              type: boolean
          additionalProperties: false
        timestamp:
          type: string
          format: date-time
      required:
        - companyId
      additionalProperties: false

    Event:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        event:
          type: string
          minLength: 1
        attributes:
          type: object
          default: null
        companyId:
          type: string
          minLength: 1
        context:
          type: object
          properties:
            active:
              type: boolean
          additionalProperties: false
        timestamp:
          type: string
          format: date-time
      required:
        - userId
        - event
      additionalProperties: false

    Feedback:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        event:
          type: string
          minLength: 1
        attributes:
          type: object
          default: null
        companyId:
          type: string
          minLength: 1
        context:
          type: object
          properties:
            active:
              type: boolean
          additionalProperties: false
        timestamp:
          type: string
          format: date-time
      required:
        - userId
        - event
      additionalProperties: false
    UserBulkItem:
      allOf:
        - properties:
            type:
              type: string
              enum: ["user"]
        - $ref: "#/components/schemas/User"
    CompanyBulkItem:
      allOf:
        - properties:
            type:
              type: string
              enum: ["company"]
        - $ref: "#/components/schemas/Company"
    EventBulkItem:
      allOf:
        - properties:
            type:
              type: string
              enum: ["event"]
        - $ref: "#/components/schemas/Event"
    FeedbackBulkItem:
      allOf:
        - properties:
            type:
              type: string
              enum: ["feedback"]
        - $ref: "#/components/schemas/Feedback"
    BulkItem:
      oneOf:
        - $ref: "#/components/schemas/UserBulkItem"
        - $ref: "#/components/schemas/CompanyBulkItem"
        - $ref: "#/components/schemas/EventBulkItem"
        - $ref: "#/components/schemas/FeedbackBulkItem"
    Bulk:
      type: array
      items:
        $ref: "#/components/schemas/BulkItem"
